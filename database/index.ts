import * as SQLite from "expo-sqlite";
import { Phrase } from "../types";

let db: SQLite.SQLiteDatabase;
const dbName = "harumal.db";

/**
 * Initializes and returns the database instance
 */
export const getDatabase = async (): Promise<SQLite.SQLiteDatabase> => {
  if (db) return db;

  try {
    db = await SQLite.openDatabaseAsync(dbName);
    return db;
  } catch (error) {
    console.error("Error opening database:", error);
    throw error;
  }
};

export const setupDatabase = async () => {
  try {
    const db = await getDatabase();
    await db.execAsync(`
      CREATE TABLE IF NOT EXISTS phrases (
          id INTEGER PRIMARY KEY AUTOINCREMENT, 
          korean TEXT NOT NULL, 
          romanization TEXT NOT NULL, 
          english TEXT NOT NULL, 
          category TEXT NOT NULL,
          favorite INTEGER DEFAULT 0, 
          usage_count INTEGER DEFAULT 0, 
          is_custom INTEGER DEFAULT 0, 
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    const count = await getPhraseCount();
    if (count === 0) {
      console.log("üì• Inserting initial phrases...");
      await insertPhrases();
    } else {
      console.log("‚úÖ Database initialized (existing data retained)");
    }
  } catch (error) {
    console.error("‚ùå Error initializing database:", error);
  }
};

/**
 * Executes a SQL query with optional parameters
 */
const executeQuery = async <T = any>(
  query: string,
  params: any[] = []
): Promise<T[]> => {
  try {
    const database = await getDatabase();
    return await database.getAllAsync(query, params);
  } catch (error) {
    console.error(`‚ùå Query Error: ${query}`, error);
    throw error;
  }
};

/**
 * Inserts phrases into the database if not already present
 */
export const insertPhrases = async () => {
  try {
    const phrases = [
      ["Ï£ÑÏÜ°Ìï©ÎãàÎã§.", "Joesonghamnida.", "I'm sorry", "Apologies"],
      [
        "Ïù¥Î¶ÑÏù¥ Î≠êÏòàÏöî?",
        "Ireumi mwoyeyo?",
        "What is your name?",
        "Basic Conversation",
      ],
      [
        "Ï†ú Ïù¥Î¶ÑÏùÄ ... ÏûÖÎãàÎã§.",
        "Je ireumeun ... imnida.",
        "My name is ...",
        "Basic Conversation",
      ],
      ["Ïûò ÏßÄÎÇ¥ÏÑ∏Ïöî?", "Jal jinaeseyo?", "How are you?", "Greetings"],
      ["Ïûò ÏßÄÎÇ¥Ïöî.", "Jal jinaeyo.", "I'm doing well.", "Responses"],
      ["Ï¢ãÏùÄ ÏïÑÏπ®Ïù¥ÏóêÏöî!", "Joeun achimieyo!", "Good morning!", "Greetings"],
      ["ÏïàÎÖïÌûà Ï£ºÎ¨¥ÏÑ∏Ïöî.", "Annyeonghi jumuseyo.", "Good night.", "Farewell"],
      [
        "Ï¢ãÏùÄ ÌïòÎ£® Î≥¥ÎÇ¥ÏÑ∏Ïöî!",
        "Joeun haru bonaeseyo!",
        "Have a nice day!",
        "Polite Phrases",
      ],
      [
        "Ïù¥Í≤ÉÏùÄ ÏñºÎßàÏòàÏöî?",
        "Igeoseun eolmayeyo?",
        "How much is this?",
        "Shopping",
      ],
      [
        "ÌôîÏû•Ïã§ Ïñ¥ÎîîÏóê ÏûàÏñ¥Ïöî?",
        "Hwajangsil eodie isseoyo?",
        "Where is the bathroom?",
        "Travel",
      ],
      ["Ïù¥Í±∞ Ï£ºÏÑ∏Ïöî.", "Igeo juseyo.", "Please give me this.", "Shopping"],
      [
        "Îß§Ïö¥ ÏùåÏãù Ï¢ãÏïÑÌïòÏÑ∏Ïöî?",
        "Maeun eumsik joahaseyo?",
        "Do you like spicy food?",
        "Food",
      ],
      [
        "Î¨ºÏùÑ Ìïú Ïûî Ï£ºÏÑ∏Ïöî.",
        "Mureul han jan juseyo.",
        "Please give me a glass of water.",
        "Restaurant",
      ],
      [
        "ÌïúÍµ≠ ÏùåÏãù Ï¢ãÏïÑÌï¥Ïöî.",
        "Hanguk eumsik joahaeyo.",
        "I like Korean food.",
        "Food",
      ],
      [
        "ÌïúÍµ≠Ïñ¥Î•º Î∞∞ÏõåÏöî.",
        "Hangukeoreul baewoyo.",
        "I am learning Korean.",
        "Education",
      ],
      [
        "Ï≤úÏ≤úÌûà ÎßêÌï¥Ï£ºÏÑ∏Ïöî.",
        "Cheoncheonhi malhaejuseyo.",
        "Please speak slowly.",
        "Requests",
      ],
      [
        "Îã§Ïãú ÎßêÌï¥Ï£ºÏÑ∏Ïöî.",
        "Dasi malhaejuseyo.",
        "Please say that again.",
        "Requests",
      ],
      [
        "ÏòÅÏñ¥ Ìï† Ï§Ñ ÏïÑÏÑ∏Ïöî?",
        "Yeongeo hal jul aseyo?",
        "Can you speak English?",
        "Basic Conversation",
      ],
      ["ÎèÑÏôÄÏ£ºÏÑ∏Ïöî!", "Dowajuseyo!", "Help me!", "Emergencies"],
      [
        "Î≥ëÏõêÏóê Í∞ÄÏïº Ìï¥Ïöî.",
        "Byeongwone gaya haeyo.",
        "I need to go to the hospital.",
        "Emergencies",
      ],
      [
        "ÌÉùÏãúÎ•º Î∂àÎü¨ Ï£ºÏÑ∏Ïöî.",
        "Taeksireul bulleo juseyo.",
        "Please call a taxi.",
        "Travel",
      ],
      [
        "ÏßÄÌïòÏ≤†Ïó≠ Ïñ¥ÎîîÏòàÏöî?",
        "Jihacheollyeok eodiyeyo?",
        "Where is the subway station?",
        "Travel",
      ],
      [
        "Î≤ÑÏä§ Ï†ïÎ•òÏû•ÏùÄ Ïñ¥ÎîîÏòàÏöî?",
        "Beoseu jeongryujangeun eodiyeyo?",
        "Where is the bus stop?",
        "Travel",
      ],
      ["Ïπ¥Îìú ÎèºÏöî?", "Kadeu dwaeyo?", "Do you accept cards?", "Shopping"],
      ["ÌòÑÍ∏àÎßå ÎèºÏöî?", "Hyeongeumman dwaeyo?", "Is it cash only?", "Shopping"],
      [
        "ÏÇ¨ÏßÑ Ï∞çÏñ¥ÎèÑ ÎèºÏöî?",
        "Sajin jjigeodo dwaeyo?",
        "Can I take a photo?",
        "Travel",
      ],
      ["Í∏∏ÏùÑ ÏûÉÏóàÏñ¥Ïöî.", "Gireul ilheosseoyo.", "I'm lost.", "Emergencies"],
      ["Ï≤úÎßåÏóêÏöî!", "Cheonmaneyo!", "You're welcome!", "Polite Phrases"],
      [
        "Ïñ¥ÎîîÏóêÏÑú ÏôîÏñ¥Ïöî?",
        "Eodieseo wasseoyo?",
        "Where are you from?",
        "Basic Conversation",
      ],
      [
        "Ï†ÄÎäî ...ÏóêÏÑú ÏôîÏñ¥Ïöî.",
        "Jeoneun ...eseo wasseoyo.",
        "I am from ...",
        "Basic Conversation",
      ],
      ["Î™á ÏãúÏòàÏöî?", "Myeot siyeyo?", "What time is it?", "Basic Conversation"],
      [
        "ÏßÄÍ∏à Î™á ÏãúÏòàÏöî?",
        "Jigeum myeot siyeyo?",
        "What time is it now?",
        "Basic Conversation",
      ],
      ["ÎÇ¥Ïùº Î¥êÏöî!", "Naeil bwayo!", "See you tomorrow!", "Farewell"],
      ["Îã§ÏùåÏóê Î¥êÏöî!", "Daeume bwayo!", "See you next time!", "Farewell"],
      ["ÎßõÏûàÍ≤å ÎìúÏÑ∏Ïöî!", "Masitge deuseyo!", "Enjoy your meal!", "Food"],
      ["Í±¥Î∞∞!", "Geonbae!", "Cheers!", "Celebrations"],
      [
        "Ïó¨Í∏∞ ÏïâÏïÑÎèÑ ÎèºÏöî?",
        "Yeogi anjado dwaeyo?",
        "Can I sit here?",
        "Basic Conversation",
      ],
    ];

    await db.runAsync(
      "INSERT INTO phrases (korean, romanization, english, category) VALUES " +
        phrases.map(() => "(?, ?, ?, ?)").join(", "),
      phrases.flat()
    );

    console.log("‚úÖ Phrases inserted successfully!");
  } catch (error) {
    console.error("‚ùå Error inserting phrases:", error);
  }
};

/**
 * Fetches all phrases from the database
 */
export const getPhrases = async (): Promise<Phrase[]> => {
  return await executeQuery("SELECT * FROM phrases");
};

/**
 * Fetches all favorite phrases
 */
export const getFavoritePhrases = async (): Promise<Phrase[]> => {
  return await executeQuery("SELECT * FROM phrases WHERE favorite = 1");
};

/**
 * Toggles a phrase's favorite status
 */
export const toggleFavorite = async (phraseId: number) => {
  await executeQuery(
    "UPDATE phrases SET favorite = NOT favorite WHERE id = ?",
    [phraseId]
  );
};

/**
 * Removes a phrase from favorites
 */
export const removeFavorite = async (phraseId: number) => {
  await executeQuery("UPDATE phrases SET favorite = 0 WHERE id = ?", [
    phraseId,
  ]);
};

/**
 * Removes all favorite phrases
 */
export const removeAllFavorites = async () => {
  await executeQuery("UPDATE phrases SET favorite = 0 WHERE favorite = 1");
};

/**
 * Verifies stored data
 */
export const verifyData = async () => {
  const data = await getPhrases();
  console.log("üìä Phrases in DB:", data);
};

/**
 * Checks if the 'phrases' table exists
 */
export const checkTableExists = async () => {
  const result = await executeQuery(
    "SELECT name FROM sqlite_master WHERE type='table' AND name='phrases'"
  );
  console.log("‚úÖ Table exists:", result.length > 0);
};

/**
 * Fetches the count of phrases in the database
 */
const getPhraseCount = async (): Promise<number> => {
  const result = await executeQuery<{ count: number }>(
    "SELECT COUNT(*) as count FROM phrases"
  );
  return result[0]?.count || 0;
};
